You want to build an expression out of nums by adding one of the symbols '+' and '-' before each integer in nums and then concatenate all the integers.

For example, if nums = [2, 1], you can add a '+' before 2 and a '-' before 1 and concatenate them to build the expression "+2-1".
Return the number of different expressions that you can build, which evaluates to target.

 

Example 1:

Input: nums = [1,1,1,1,1], target = 3
Output: 5
Explanation: There are 5 ways to assign symbols to make the sum of nums be target 3.
-1 + 1 + 1 + 1 + 1 = 3
+1 - 1 + 1 + 1 + 1 = 3
+1 + 1 - 1 + 1 + 1 = 3
+1 + 1 + 1 - 1 + 1 = 3
+1 + 1 + 1 + 1 - 1 = 3
-----------------------------------------------------------------------------
class Solution {
public:
    int df(vector<int>& nums, int sum,int n,vector<vector<int>> &dp){
        if(n==0 && sum==0){
            return 1;
        }else if(n==1 && sum==0){
            if(nums[0]==0){
                return 2;
            }else{
                return 1;
            }
        }else if(n==1){
            if(sum==nums[0]){
                return 1;
            }else{
                return 0;
            }
        }
        if(nums[n-1]<=sum){
            dp[n][sum]=df(nums,sum-nums[n-1],n-1,dp) + df(nums,sum,n-1,dp);
        }else{
            dp[n][sum]=df(nums,sum,n-1,dp);
        }
        return dp[n][sum];
    }
    int findTargetSumWays(vector<int>& nums, int target) {
        int sum=0;
        int n=nums.size();
        for(int i=0;i<nums.size();i++){
            sum+=nums[i];
        }
        if(sum<abs(target) || (target+sum)%2 !=0 ){
            return 0;
        }
        sum=(target+sum)/2;
        
        vector<vector<int>>dp(n+1,vector<int>(sum+1,-1));
        return df(nums,sum,n,dp);
    }
};
