Given a Linked List of size N, where every node represents a sub-linked-list and contains two pointers:
(i) a next pointer to the next node,
(ii) a bottom pointer to a linked list where this node is head.
Each of the sub-linked-list is in sorted order.
Flatten the Link List such that all the nodes appear in a single level while maintaining the sorted order. 

Note: The flattened list will be printed using the bottom pointer instead of the next pointer.
For more clarity have a look at the printList() function in the driver code.

 

Example 1:

Input:
5 -> 10 -> 19 -> 28
|     |     |     | 
7     20    22   35
|           |     | 
8          50    40
|                 | 
30               45
Output:  5-> 7-> 8- > 10 -> 19-> 20->
22-> 28-> 30-> 35-> 40-> 45-> 50.
Explanation:
The resultant linked lists has every 
node in a single level.
(Note: | represents the bottom pointer.)
------------------------------------------------------------------
Node *merge(Node * l1,Node *l2){
    if(!l1){
        return l2;
    }
    if(!l2){
        return l1;
    }
    
    Node *dummy=new Node(0);
    Node *res=dummy;
    while(l1!=NULL && l2!=NULL){
        if(l1->data < l2->data){
            dummy->bottom=l1;
            dummy=dummy->bottom;
            l1=l1->bottom;
        }else{
            dummy->bottom=l2;
            dummy=dummy->bottom;
            l2=l2->bottom;
        }
    }
    if(l1){
        dummy->bottom=l1;
    }else {
        dummy->bottom=l2;
    }
    return res->bottom;
}
Node *flatten(Node *root)
{
   // Your code here
   if(root==NULL || root->next==NULL){
       return root;
   }
   root->next=flatten(root->next);
   
    root=merge(root,root->next);
    return root;
}
