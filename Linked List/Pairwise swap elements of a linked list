Given a singly linked list of size N. The task is to swap elements in the linked list pairwise.
For example, if the input list is 1 2 3 4, the resulting list after swaps will be 2 1 4 3.
Note: You need to swap the nodes, not only the data. If only data is swapped then driver will print -1.

Example 1:

Input:
LinkedList: 1->2->2->4->5->6->7->8
Output: 2 1 4 2 6 5 8 7
Explanation: After swapping each pair
considering (1,2), (2, 4), (5, 6).. so
on as pairs, we get 2, 1, 4, 2, 6, 5,
8, 7 as a new linked list.
----------------------------------------------
Node* pairWiseSwap(struct Node* head) 
    {
        // The task is to complete this method
        if(head==NULL || head->next==NULL){
            return head;
        }
        Node *prev=NULL,*curr=head;
        Node *np=NULL;
        // Node *t=head->next;
        // head->next=prev;
        while(curr!=NULL && curr->next!=NULL){
            np=curr->next;
            if(prev==NULL){
            head=np;
            }else{
                prev->next=np;
            }
            curr->next=np->next;
            np->next=curr;
            prev=curr;
            curr=curr->next;
        }
        return head;
    }
class Solution
{
    public:
    Node* pairWiseSwap(Node* head)
    {
        Node *a = head, *b, *c;
        Node *prev = NULL;
        
        while( a && a->next )
        {
            b = a->next;     // b is second node
            c = b->next;     // c is third node (c might be null)
                             // current order : prev - a - b - c
            
            if(a == head)
                // b will be new head
                head = b;
            else
                // else, linking second node i.e. b, to a's ancestor
                prev->next = b;
            
            b->next = a;     // a should now come after b
            a->next = c;     // connecting a to list ahead
            
            // now we have to update a and prev for next pair
            prev = a;
            a = c;
        }
        
        return head;
    }
};
