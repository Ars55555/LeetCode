Input:
   2
 /    \
1      3
Output: 1 
Explanation: 
The left subtree of root node contains node
with key lesser than the root nodes key and 
the right subtree of root node contains node 
with key greater than the root nodes key.
Hence, the tree is a BST.
--------------------------------------------------
class Solution
{   
    boolean b(Node root,int p,int s){
        if(root==null){
            return true;
        }
        if(root.data >= s || root.data <= p  ){
            return false;
        }
       return b(root.left,p,root.data) &&
        b(root.right,root.data,s);
    }
    //Function to check whether a Binary Tree is BST or not.
    boolean isBST(Node root)
    {
        // code here.
        int s=Integer.MAX_VALUE,p=Integer.MIN_VALUE;
        return b(root,p,s);
    }
}
